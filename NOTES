_PyEval_EvalFrameDefault


rr record python3.9 test_script.py
#rr replay --gdb-x yp-gdb.py
rr replay --gdb-x yp/main.py
rr replay --gdb-x yp/main.py -o "-ex=py-break /home/manuel/Projects/yp/test_script.py:main"



break _PyEval_EvalFrameDefault
p f.f_code.co_filename

PyDTrace_LINE_ENABLED
# PyFrame_GetLineNumber() aka f_lineno

PyCode_Addr2Line(f.f_code, f->f_lasti)



break ceval.c:1353 if (strcmp(((PyASCIIObject*)f.f_code.co_filename) + 1, "/home/manuel/Projects/yp/test_script.py") == 0)
break ceval.c:1409 if (strcmp(((PyASCIIObject*)f.f_code.co_filename) + 1, "/home/manuel/Projects/yp/test_script.py") == 0)

 && (PyCode_Addr2Line(f.f_code, f->f_lasti) == 10))

commands 1
silent
enable 3
continue
end



define xxx
  reverse-cont
  py-list
  end

Py_LOCAL_INLINE(PyObject *) _Py_HOT_FUNCTION
call_function(PyThreadState *tstate,
              PyTraceInfo *trace_info,
              PyObject ***pp_stack,
              Py_ssize_t oparg,
              PyObject *kwnames)
{
    PyObject **pfunc = (*pp_stack) - oparg - 1;
    PyObject *func = *pfunc;
    PyObject *x, *w;
    Py_ssize_t nkwargs = (kwnames == NULL) ? 0 : PyTuple_GET_SIZE(kwnames);
    Py_ssize_t nargs = oparg - nkwargs;
    PyObject **stack = (*pp_stack) - nargs - nkwargs;

    if (trace_info->cframe.use_tracing) {
        x = trace_call_function(tstate, trace_info, func, stack, nargs, kwnames);


_PyEval_EvalFrameDefault

f.f_code.co_filename == '/home/manuel/Projects/yp/test_script.py'
f.f_code.co_name == 'main'
f.f_lineno == 8

strcmp(((PyASCIIObject*)f.f_code.co_filename) + 1, "/home/manuel/Projects/yp/test_script.py") == 0


p PyBytes_AsString(PyUnicode_AsUTF8String(f.f_code.co_name))  ## ref counting

PyUnicode_1BYTE_DATA
PyUnicode_DATA
_PyUnicode_COMPACT_DATA // _PyUnicode_NONCOMPACT_DATA
#define PyUnicode_IS_COMPACT(op) (((PyASCIIObject*)(op))->state.compact)

(char*) (((PyASCIIObject*)f.f_code.co_filename) + 1)
#define _PyUnicode_COMPACT_DATA(op)                     \
    (PyUnicode_IS_ASCII(op) ?                   \
     ((void*)((PyASCIIObject*)(op) + 1)) :              \
     ((void*)((PyCompactUnicodeObject*)(op) + 1)))
